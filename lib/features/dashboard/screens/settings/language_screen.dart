import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../../../config/theme.dart';
import '../../../../widgets/buttons.dart';
import '../../../auth/models/user.dart';

class LanguageScreen extends StatefulWidget {
  final User user;
  
  const LanguageScreen({
    super.key,
    required this.user,
  });

  @override
  LanguageScreenState createState() => LanguageScreenState();
}

class LanguageScreenState extends State<LanguageScreen> {
  String _selectedLanguage = '–†—É—Å—Å–∫–∏–π';
  bool _autoDetect = true;
  bool _isLoading = false;
  
  final List<Map<String, String>> _languages = [
    {'code': 'ru', 'name': '–†—É—Å—Å–∫–∏–π', 'flag': 'üá∑üá∫'},
    {'code': 'en', 'name': 'English', 'flag': 'üá∫üá∏'},
    {'code': 'de', 'name': 'Deutsch', 'flag': 'üá©üá™'},
    {'code': 'fr', 'name': 'Fran√ßais', 'flag': 'üá´üá∑'},
    {'code': 'es', 'name': 'Espa√±ol', 'flag': 'üá™üá∏'},
    {'code': 'it', 'name': 'Italiano', 'flag': 'üáÆüáπ'},
    {'code': 'pt', 'name': 'Portugu√™s', 'flag': 'üáµüáπ'},
    {'code': 'zh', 'name': '‰∏≠Êñá', 'flag': 'üá®üá≥'},
    {'code': 'ja', 'name': 'Êó•Êú¨Ë™û', 'flag': 'üáØüáµ'},
    {'code': 'ko', 'name': 'ÌïúÍµ≠Ïñ¥', 'flag': 'üá∞üá∑'},
  ];
  
  @override
  void initState() {
    super.initState();
    _loadLanguageSettings();
  }
  
  Future<void> _loadLanguageSettings() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _selectedLanguage = prefs.getString('language_${widget.user.id}') ?? '–†—É—Å—Å–∫–∏–π';
      _autoDetect = prefs.getBool('language_auto_detect_${widget.user.id}') ?? true;
    });
  }
  
  Future<void> _saveLanguageSettings() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      final prefs = await SharedPreferences.getInstance();
      
      await prefs.setString('language_${widget.user.id}', _selectedLanguage);
      await prefs.setBool('language_auto_detect_${widget.user.id}', _autoDetect);
      
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }
  
  void _showLanguageChangeDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞'),
          content: const Text(
            '–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–π—á–∞—Å?',
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('–ü–æ–∑–∂–µ'),
            ),
            TextButton(
              onPressed: () {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('–Ø–∑—ã–∫ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ'),
                    backgroundColor: Colors.blue,
                  ),
                );
              },
              child: const Text('–ü—Ä–∏–º–µ–Ω–∏—Ç—å'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–Ø–∑—ã–∫'),
        elevation: 0,
        backgroundColor: AppTheme.primaryColor,
        foregroundColor: Colors.white,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
                    style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 16),
                  
                  Card(
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Column(
                      children: [
                        SwitchListTile(
                          title: const Text('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'),
                          subtitle: const Text('–û–ø—Ä–µ–¥–µ–ª—è—Ç—å —è–∑—ã–∫ –ø–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º'),
                          value: _autoDetect,
                          onChanged: (value) {
                            setState(() {
                              _autoDetect = value;
                            });
                            _saveLanguageSettings();
                          },
                          activeColor: AppTheme.primaryColor,
                        ),
                        if (!_autoDetect) ...[
                          const Divider(height: 1),
                          ...List.generate(_languages.length, (index) {
                            final language = _languages[index];
                            return RadioListTile<String>(
                              title: Row(
                                children: [
                                  Text(
                                    language['flag']!,
                                    style: const TextStyle(fontSize: 24),
                                  ),
                                  const SizedBox(width: 12),
                                  Text(language['name']!),
                                ],
                              ),
                              value: language['name']!,
                              groupValue: _selectedLanguage,
                              onChanged: (value) {
                                setState(() {
                                  _selectedLanguage = value!;
                                });
                              },
                              activeColor: AppTheme.primaryColor,
                            );
                          }),
                        ],
                      ],
                    ),
                  ),
                  
                  const SizedBox(height: 24),
                  
                  Text(
                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                    style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 16),
                  
                  Card(
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Column(
                      children: [
                        ListTile(
                          leading: const Icon(Icons.download),
                          title: const Text('–ó–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã'),
                          subtitle: const Text('–î–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞'),
                          trailing: const Icon(Icons.chevron_right),
                          onTap: () {
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text('–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏'),
                              ),
                            );
                          },
                        ),
                        const Divider(height: 1),
                        ListTile(
                          leading: const Icon(Icons.translate),
                          title: const Text('–ü–µ—Ä–µ–≤–æ–¥ –∫—É—Ä—Å–æ–≤'),
                          subtitle: const Text('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ'),
                          trailing: const Icon(Icons.chevron_right),
                          onTap: () {
                            showDialog(
                              context: context,
                              builder: (BuildContext context) {
                                return AlertDialog(
                                  title: const Text('–ü–µ—Ä–µ–≤–æ–¥ –∫—É—Ä—Å–æ–≤'),
                                  content: const Text(
                                    '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ–º–æ–∂–µ—Ç –∏–∑—É—á–∞—Ç—å –∫—É—Ä—Å—ã –Ω–∞ –≤–∞—à–µ–º —è–∑—ã–∫–µ. –ö–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.',
                                  ),
                                  actions: [
                                    TextButton(
                                      onPressed: () => Navigator.pop(context),
                                      child: const Text('–ü–æ–Ω—è—Ç–Ω–æ'),
                                    ),
                                  ],
                                );
                              },
                            );
                          },
                        ),
                        const Divider(height: 1),
                        ListTile(
                          leading: const Icon(Icons.location_on),
                          title: const Text('–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
                          subtitle: const Text('–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ —á–∏—Å–µ–ª'),
                          trailing: const Icon(Icons.chevron_right),
                          onTap: () {
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text('–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏'),
                              ),
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                  
                  const SizedBox(height: 32),
                  
                  if (!_autoDetect)
                    SizedBox(
                      width: double.infinity,
                      child: AppButton(
                        text: '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                        onPressed: () {
                          _saveLanguageSettings().then((_) {
                            _showLanguageChangeDialog();
                          });
                        },
                        type: AppButtonType.primary,
                      ),
                    ),
                  
                  const SizedBox(height: 16),
                  
                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.green.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.green.withOpacity(0.3)),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Icon(Icons.language, color: Colors.green[700]),
                            const SizedBox(width: 8),
                            Text(
                              '–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å',
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                color: Colors.green[700],
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        const Text(
                          'IntellectualPath –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —è–∑—ã–∫ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—É—Ä—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —è–∑—ã–∫–∞—Ö.',
                          style: TextStyle(fontSize: 14),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
    );
  }
} 